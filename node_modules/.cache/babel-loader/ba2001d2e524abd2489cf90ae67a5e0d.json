{"ast":null,"code":"import axios from 'axios';\nimport { GET_BY_USER, LOADING, ERROR } from '../types/publicationsTypes';\nimport * as usersTypes from '../types/usersTypes';\nconst {\n  GET_ALL: GET_ALL_USERS\n} = usersTypes;\nexport const getByUser = key => async (dispatch, getState) => {\n  dispatch({\n    type: LOADING\n  });\n  const {\n    users\n  } = getState().usersReducers;\n  const {\n    publications\n  } = getState().publicationsReducers; //User_Id es igual a users que recibo como parametro\n\n  const user_id = users[key].id;\n\n  try {\n    const response = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${user_id}`);\n    const news = response.data.map(publication => ({ ...publication,\n      comments: [],\n      open: false\n    }));\n    const update_publications = [...publications, news];\n    dispatch({\n      type: GET_BY_USER,\n      //Tipo \n      payload: update_publications\n    }); //Busco la ultima publicación\n\n    const publications_key = update_publications.length - 1; //Actualizar usuarios\n\n    const update_Users = [...users];\n    update_Users[key] = { ...users[key],\n      publications_key\n    };\n    dispatch({\n      type: GET_ALL_USERS,\n      //Tipo \n      payload: update_Users\n    });\n  } catch (error) {\n    console.log('Error' + error.message);\n    dispatch({\n      type: ERROR,\n      payload: 'Pubicaciones no disponibles.'\n    });\n  }\n};\nexport const openClose = (pub_key, com_key) => dispatch => {\n  console.log(pub_key, com_key);\n};","map":{"version":3,"sources":["/home/alejandra/Escritorio/Proyectos/Platzi/Blog/src/redux/actions/publicationsActions.js"],"names":["axios","GET_BY_USER","LOADING","ERROR","usersTypes","GET_ALL","GET_ALL_USERS","getByUser","key","dispatch","getState","type","users","usersReducers","publications","publicationsReducers","user_id","id","response","get","news","data","map","publication","comments","open","update_publications","payload","publications_key","length","update_Users","error","console","log","message","openClose","pub_key","com_key"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,KAA9B,QAA0C,4BAA1C;AACA,OAAO,KAAKC,UAAZ,MAA4B,qBAA5B;AAEA,MAAM;AAACC,EAAAA,OAAO,EAAEC;AAAV,IAAyBF,UAA/B;AAEA,OAAO,MAAMG,SAAS,GAAGC,GAAD,IAAO,OAAMC,QAAN,EAAeC,QAAf,KAA0B;AACrDD,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAACT;AADA,GAAD,CAAR;AAIA,QAAM;AAACU,IAAAA;AAAD,MAAQF,QAAQ,GAAGG,aAAzB;AACA,QAAM;AAACC,IAAAA;AAAD,MAAeJ,QAAQ,GAAGK,oBAAhC,CANqD,CAOrD;;AACA,QAAMC,OAAO,GAACJ,KAAK,CAACJ,GAAD,CAAL,CAAWS,EAAzB;;AAEA,MAAI;AACA,UAAMC,QAAQ,GAAE,MAAMlB,KAAK,CAACmB,GAAN,CAAW,qDAAoDH,OAAQ,EAAvE,CAAtB;AAEA,UAAMI,IAAI,GAACF,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAmBC,WAAD,KAC1B,EAAE,GAAGA,WAAL;AACCC,MAAAA,QAAQ,EAAC,EADV;AAECC,MAAAA,IAAI,EAAC;AAFN,KAD0B,CAAlB,CAAX;AAOA,UAAMC,mBAAmB,GAAE,CACvB,GAAGZ,YADoB,EAEvBM,IAFuB,CAA3B;AAIAX,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEV,WADD;AACc;AACnB0B,MAAAA,OAAO,EAACD;AAFH,KAAD,CAAR,CAdA,CAmBA;;AACA,UAAME,gBAAgB,GAAEF,mBAAmB,CAACG,MAApB,GAA4B,CAApD,CApBA,CAqBA;;AACA,UAAMC,YAAY,GAAE,CAAC,GAAGlB,KAAJ,CAApB;AACAkB,IAAAA,YAAY,CAACtB,GAAD,CAAZ,GAAmB,EACf,GAAGI,KAAK,CAACJ,GAAD,CADO;AAEfoB,MAAAA;AAFe,KAAnB;AAIAnB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEL,aADD;AACgB;AACrBqB,MAAAA,OAAO,EAACG;AAFH,KAAD,CAAR;AAIH,GA/BD,CAgCA,OAAOC,KAAP,EAAc;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAASF,KAAK,CAACG,OAA3B;AACAzB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACR,KADA;AAELwB,MAAAA,OAAO,EAAC;AAFH,KAAD,CAAR;AAIH;AACJ,CAjDM;AAmDP,OAAO,MAAMQ,SAAS,GAAC,CAACC,OAAD,EAASC,OAAT,KAAoB5B,QAAD,IAAY;AAClDuB,EAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ,EAAoBC,OAApB;AACH,CAFM","sourcesContent":["import axios from 'axios';\nimport {GET_BY_USER, LOADING, ERROR} from '../types/publicationsTypes';\nimport * as usersTypes from '../types/usersTypes';\n\nconst {GET_ALL: GET_ALL_USERS}=usersTypes;\n\nexport const getByUser =(key)=>async(dispatch,getState)=>{\n    dispatch({\n        type:LOADING\n    })\n\n    const {users}=getState().usersReducers;\n    const {publications}=getState().publicationsReducers;\n    //User_Id es igual a users que recibo como parametro\n    const user_id=users[key].id;\n\n    try {\n        const response= await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${user_id}`);\n\n        const news=response.data.map((publication)=>(\n           { ...publication,\n            comments:[],\n            open:false\n            }\n        ));\n\n        const update_publications =[\n            ...publications,\n            news\n        ];\n        dispatch({\n            type: GET_BY_USER, //Tipo \n            payload:update_publications\n        });\n\n        //Busco la ultima publicación\n        const publications_key= update_publications.length -1;\n        //Actualizar usuarios\n        const update_Users =[...users];\n        update_Users[key] ={\n            ...users[key],\n            publications_key\n        }\n        dispatch({\n            type: GET_ALL_USERS, //Tipo \n            payload:update_Users\n        });\n    } \n    catch (error) {\n        console.log('Error'+ error.message)\n        dispatch({\n            type:ERROR,\n            payload:'Pubicaciones no disponibles.'\n        })\n    }\n}\n\nexport const openClose=(pub_key,com_key)=>(dispatch)=>{\n    console.log(pub_key,com_key)\n}\n"]},"metadata":{},"sourceType":"module"}